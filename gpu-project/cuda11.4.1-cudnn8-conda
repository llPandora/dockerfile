FROM nvidia/cuda:11.3.1-cudnn8-devel-ubuntu20.04

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV DEBIAN_FRONTEND=noninteractive

# install conda dependencies
RUN apt-get update --fix-missing && \
    apt-get install -y wget bzip2 ca-certificates libglib2.0-0 libxext6 libsm6 libxrender1 git mercurial subversion && \
    apt-get clean

# set conda environment to "base"
RUN echo ". /root/.conda/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

# install zsh & ohmyzsh
RUN apt-get install -y zsh && \
    wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh || true

# install opencv cuda dependencies
RUN apt install -y build-essential cmake pkg-config unzip yasm git checkinstall && \
    apt install -y libjpeg-dev libpng-dev libtiff-dev && \
    apt install -y libavcodec-dev libavformat-dev libswscale-dev libavresample-dev && \
    apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev && \
    apt install -y libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev && \
    apt install -y libfaac-dev libmp3lame-dev libvorbis-dev && \
    apt install -y libopencore-amrnb-dev libopencore-amrwb-dev && \
    apt install -y libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils && \
    cd /usr/include/linux && ln -s -f ../libv4l1-videodev.h videodev.h && cd ~ && \
    apt install -y libgtk-3-dev && \
    apt install -y libtbb-dev && \
    apt install -y libatlas-base-dev gfortran && \
    apt install -y libprotobuf-dev protobuf-compiler && \
    apt install -y libgoogle-glog-dev libgflags-dev && \
    apt install -y libgphoto2-dev libeigen3-dev libhdf5-dev doxygen

# compile and install opencv
# cd /tmp && wget -O opencv.zip https://github.com/opencv/opencv/archive/refs/tags/4.5.2.zip && \
# wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/4.5.2.zip && \
# unzip opencv.zip && unzip opencv_contrib.zip && \
# cd opencv-4.5.2 && mkdir build && cd build && \
# cmake -D CMAKE_BUILD_TYPE=RELEASE \
# -D CMAKE_INSTALL_PREFIX=/root/.conda/conda/lib/opencv \
# -D WITH_TBB=ON \
# -D ENABLE_FAST_MATH=1 \
# -D CUDA_FAST_MATH=1 \
# -D WITH_CUBLAS=1 \
# -D WITH_CUDA=ON \
# -D BUILD_opencv_cudacodec=OFF \
# -D WITH_CUDNN=ON \
# -D OPENCV_DNN_CUDA=ON \
# -D CUDA_ARCH_BIN=7.5 \
# -D WITH_V4L=ON \
# -D WITH_QT=OFF \
# -D WITH_OPENGL=ON \
# -D WITH_GSTREAMER=ON \
# -D OPENCV_GENERATE_PKGCONFIG=ON \
# -D OPENCV_PC_FILE_NAME=opencv.pc \
# -D OPENCV_ENABLE_NONFREE=ON \
# -D OPENCV_PYTHON3_INSTALL_PATH=/root/.conda/conda/lib/python3.8/site-packages \
# -D PYTHON3_EXECUTABLE=/root/.conda/conda/bin/python \
# -D PYTHON3_LIBRARIES=/root/.conda/conda/lib \
# -D PYTHON3_INCLUDE_DIRS=/root/.conda/conda/include \
# -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.5.2/modules \
# -D INSTALL_PYTHON_EXAMPLES=OFF \
# -D INSTALL_C_EXAMPLES=OFF \
# -D BUILD_EXAMPLES=OFF .. && \
# make -j8 && make install

ENV PATH /root/.conda/conda/bin:$PATH

EXPOSE 8888

CMD ["jupyter", "lab", "--notebook-dir=/root/workspace", "--ip=0.0.0.0", "--allow-root"]

# conda installation (This installation must be done using container with a volume mounted to "/root/.conda")
# wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \
#     /bin/bash ~/miniconda.sh -b -p /root/.conda/conda && \
#     rm ~/miniconda.sh && \
#     /root/.conda/conda/bin/conda clean -tipsy && \
#     ln -s /root/.conda/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
#     find /root/.conda/conda/ -follow -type f -name '*.a' -delete && \
#     find /root/.conda/conda/ -follow -type f -name '*.js.map' -delete && \
#     /root/.conda/conda/bin/conda clean -afy

# building example
# docker build -t cuda11.4.1-cudnn8-conda -f gpu-project/cuda11.4.1-cudnn8-conda .